# 스프링 DB 접근기술  4가지

1. 순수 JDBC ( 사용하지 않음 , 이러한 것이있다~ 정도 20년전쯤 사용 )
- 환경설정
    1. build.gradle파일에 jdbc, h2 DB 라이브러리 추가
    2. 스프링 부트 데이터베이스 연결 설정 추가  : resources/application.properties

- JDBC 리포지토리 구현
    Connection conn = null;
    PreparedStatement pstmt = null;
    ResultSet rs = null;
    try {
         conn = getConnection();
         pstmt = conn.prepareStatement(sql,
         Statement.RETURN_GENERATED_KEYS);
         pstmt.setString(1, member.getName());
         pstmt.executeUpdate();
         rs = pstmt.getGeneratedKeys();
         if (rs.next()) {
             member.setId(rs.getLong(1));
         } else {
            throw new SQLException("id 조회 실패");
         }
         return member;
     } catch (Exception e) {
         throw new IllegalStateException(e);
     } finally {
         close(conn, pstmt, rs);
     }

2. 스프링 JDBCTemplate ( 실무에서 사용하는 곳 많이 있음 )
- 환경설정 : 기존 JDBC 환경설정과 동일
- 특징 : 스프링 JDBCTemplate 이나 Mybatis  같은 라이브러리는 JDBC API에서 본 반복 코드를 대부분 제거해준다.
        하지만 SQL은 직접 작성해야 한다.

private final JdbcTemplate jdbcTemplate;

public JdbcTemplateMemberRepository(DataSource dataSource) {
    jdbcTemplate = new JdbcTemplate(dataSource);
}

SimpleJdbcInsert jdbcInsert = new SimpleJdbcInsert(jdbcTemplate);

jdbcInsert.withTableName("member").usingGeneratedKeyColumns("id");

Map<String, Object> parameters = new HashMap<>();
parameters.put("name", member.getName());

Number key = jdbcInsert.executeAndReturnKey(newMapSqlParameterSource(parameters));
member.setId(key.longValue());

List<Member> result = jdbcTemplate.query("select * from member where id= ?", memberRowMapper(), id);
return result.stream().findAny();

3. JPA
- 환경설정
    1. build.gradle파일에 jpa, h2 DB 라이브러리 추가
    2. 스프링 부트 데이터베이스 연결 설정 추가  : resources/application.properties

- 특징
    1. 쿼리를 JPA가 짜줘서 생산성을 크게 증가시킴
    2. 스프링은 해당 클래스의 메서드를 실행할 때 트랜잭션을 시작하고, 메서드가 정상 종료되면 트랜잭션을 커밋한다. 만약 런타임 예외가 발생하면 롤백한다
    3. JPA를 통한 모든 데이터 변경은 트랜잭션 안에서 실행해야 한다 > @Transactional 클래스 or 메소드에 추가

private final EntityManager em;
public JpaMemberRepository(EntityManager em) {
    this.em = em;
}
public Member save(Member member) {
    em.persist(member);
    return member;
}
public Optional<Member> findById(Long id) {
    Member member = em.find(Member.class, id);
    return Optional.ofNullable(member);
}
public List<Member> findAll() {
    return em.createQuery("select m from Member m", Member.class)
    .getResultList();
}

4. 스프링데이터 JPA
- 주의 : 스프링 데이터 JPA는 JPA를 편리하게 사용하도록 도와주는 기술입니다. 따라서 JPA를 먼저 학습한 후에 스프링 데이터 JPA를 학습해야 한다.
---->>> JPA 학습후 실습하도록하자

--------------------------------------------------------------------------------------------
* DataSource 는 DB커넥션 획득시사용하는 객체로 스프링부트가 DB커넥션정보를 바탕으로 DataSource를 생성하고 스프링 빈으만들어줌.
 > DI(의존성주입) 를 받을 수 있음

* 스프링 통합 테스트
Test 파일에 @SpringBootTest 와 @Transactional 어노테이션 추가
@SpringBootTest : 스프링 컨테이너와 테스트를 함께 실행한다.
@Transactional : 테스트 케이스에 이 애노테이션이 있으면, 테스트 시작 전에 트랜잭션을 시작하고,
테스트 완료 후에 항상 롤백한다. 이렇게 하면 DB에 데이터가 남지 않으므로 다음 테스트에 영향을 주지
않는다
